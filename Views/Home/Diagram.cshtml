<!--
# -------------------------------------------------------------------------------
# Author:      Cody Martin <cody.martin@blacklanternsecurity.com>
#
# Created:     10-15-2020
# Copyright:   (c) BLS OPS LLC. 2020
# Licence:     GPL
# -------------------------------------------------------------------------------
-->

@model Scenarios
@{ Layout = null;
    ViewData["Title"] = "Graph"; }

<!--<script src="~/js/d3.min.js"></script>-->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined"
      rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
<script src="~/js/saveSvgAsPng.js"></script>
<!--<button onclick="window.history.back();">BACK</button>-->
<button onclick="saveSvgAsPng(document.getElementById('theSVG'), '@Model.Name' + '.png');">SAVE <span class="material-icons-outlined">save</span></button>
<button onclick="copyMarkdown()">MARKDOWN <span class="material-icons-outlined">content_paste</span></button>
<button onclick="blackWhite()">BLACK<span class="material-icons-outlined">swap_horizontal_circle</span>WHITE</button>
<style>

    .link {
        stroke: #000;
        stroke-width: 3px;
    }

        .link.low {
            stroke: #4cff00;
        }

    #low {
        fill: #4cff00;
    }

    .link.very-low {
        stroke: #00ffe8;
    }

    #very-low {
        fill: #00ffe8;
    }

    .link.moderate {
        stroke: #ffd800;
    }

    #moderate {
        fill: #ffd800;
    }

    .link.high {
        stroke: #ff6a00;
    }

    #high {
        fill: #ff6a00;
    }

    .link.very-high {
        stroke: #ff0000;
    }

    #very-high {
        fill: #ff0000;
    }

    .node {
        cursor: move;
        fill: #ccc;
        stroke: #000;
        stroke-width: 1.5px;
    }

        .node.fixed {
            fill: #ccc;
        }

    .node-title {
        font-size: 24px;
    }
</style>
<div></div>
<script>

    var width = 0.95 * window.innerWidth,
        height = 0.95 * window.innerHeight;

    var force = d3.layout.force()
        .size([width, height])
        .charge(-1500)
        .linkDistance(200)
        .on("tick", tick);

    var drag = force.drag()
        .on("dragstart", dragstart);

    var svg = d3.select("div").append("svg")
        .attr("id", "theSVG")
        .attr("width", width)
        .attr("height", height);

    // build the arrow.
    svg.append("svg:defs").selectAll("marker")
        .data(["very-low", "low", "moderate", "high", "very-high"])      // Different link/path types can be defined here
        .enter().append("svg:marker")    // This section adds in the arrows
        .attr("id", String)
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 0)
        .attr("refY", 0)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
        .append("svg:path")
        .attr("d", "M0,-5L10,0L0,5");

    var link = svg.selectAll(".link"),
        text = svg.selectAll(".text"),
        tspan = svg.selectAll(".tspan"),
        node = svg.selectAll(".node"),
        rect = svg.selectAll(".rect");

    d3.json("/graphs/graph.json", function (error, graph) {
        if (error) throw error;

        force
            .nodes(graph.nodes)
            .links(graph.links)
            .start();

        link = link.data(graph.links)
            .enter()
            .append("g")
            .attr("class", "link-group")
            .append("polyline")
            .attr("class", function (d) { return "link " + d.risk; })
            .attr("marker-mid", function (d) { return "url(#" + d.risk + ")"; });

        node = node.data(graph.nodes)
            .enter()
            .append("g")
            .attr("class", "node-group")
            /*.append("circle")
            .attr("class", "node")
            .attr("r", 12)
            .on("dblclick", dblclick)
            .call(drag);*/
            .append("image")
            .attr("xlink:href", function (d) { return d.icon; })
            .attr("x", "-32")
            .attr("y", "-32")
            .attr("width", "64")
            .attr("heigh", "64")
            .on("dblclick", dblclick)
            .call(drag);

        // Adding for text backgrounds
        rect = svg.selectAll(".node-group")
            .append("rect")
            .data(force.nodes())
            .attr("x", function (d) { return d.x; })
            .attr("y", function (d) { return d.y; })
            .attr("rx", 6)
            .attr("ry", 6)
            .style("fill", "#d2d2d2")
            .style("opacity", "0.9");
        // end

        text = svg.selectAll(".node-group")
            .append("text")
            .data(force.nodes())
            .text(function (d) { return d.title; })
            .attr("x", function (d) { return d.x; })
            .attr("y", function (d) { return d.y; })
            .attr("text-anchor", "middle")
            .attr("class", "node-title")
            .call(wrap, 200);

        //Adding for text background
        svg.selectAll("text")
            .each(function (d) { d.bbox = this.getBBox(); });

        const xMargin = 4;
        const yMargin = 2;
        svg.selectAll("rect")
            .data(force.nodes())
            .attr("width", d => d.bbox.width + 2 * xMargin)
            .attr("height", d => d.bbox.height + 2 * yMargin)
            .attr("class", "node-rects")
            .attr("transform", function (d) {
                return `translate(-${xMargin}, -${d.bbox.height * 0.8 + yMargin})`
            });
        // end

        link_text = svg.selectAll(".link-group")
            .append("text")
            .data(force.links())
            .text(function (d) { return d.label; })
            .attr("font-family", "Arial, Helvetica, sans-serif")
            .attr("x", function (d) {
                if (d.target.x > d.source.x) { return (d.source.x + (d.target.x - d.source.x) / 2); }
                else { return (d.target.x + (d.source.x - d.target.x) / 2); }
            })
            .attr("y", function (d) {
                if (d.target.y > d.source.y) { return (d.source.y + (d.target.y - d.source.y) / 2); }
                else { return (d.target.y + (d.source.y - d.target.y) / 2); }
            }).attr("fill", "Black")
            .style("font", "bold 18px Arial")
            .attr("class", "link-numbers")
            .attr("dy", 20);
    });

    function tick() {
        /* Following only for paths
         link.attr("x1", function (d) { return d.source.x; })
            .attr("y1", function (d) { return d.source.y; })
            .attr("x2", function (d) { return d.target.x; })
            .attr("y2", function (d) { return d.target.y; });
            */
        link.attr("points", function (d) {
            return d.source.x + "," + d.source.y + " " +
                (d.source.x + d.target.x) / 2 + "," + (d.source.y + d.target.y) / 2 + " " +
                d.target.x + "," + d.target.y;
        });

        node.attr("x", function (d) { return d.x - 32; })
            .attr("y", function (d) { return d.y - 32; });

        text.attr("x", function (d) { return d.x; })
            .attr("y", function (d) { return d.y + 55; });

        svg.selectAll("tspan")
            .attr("x", function (d) { return d.x; })
            .attr("y", function (d) { return d.y + 55; });

        link_text.attr("x", function (d) {
            if (d.target.x > d.source.x) { return (d.source.x + (d.target.x - d.source.x) / 2); }
            else { return (d.target.x + (d.source.x - d.target.x) / 2); }
        })
            .attr("y", function (d) {
                if (d.target.y > d.source.y) { return (d.source.y + (d.target.y - d.source.y) / 2); }
                else { return (d.target.y + (d.source.y - d.target.y) / 2); }
            });

        svg.selectAll("rect")
            .attr("x", function (d) { return d.x - d.bbox.width/2; })
            .attr("y", function (d) { return d.y + 55 });
    }

    function tick_alpha() {
        link.attr("x1", function (d) {
            modifier = 0;
            difference = d.source.x - d.target.x;
            sign = Math.sign(difference);
            if (Math.abs(difference) > 26 && sign == -1) { modifier = 28; }
            else if (Math.abs(difference) > 26 && sign == 1) { modifier = -28; }
            return d.source.x + modifier;
        })
            .attr("y1", function (d) {
                modifier = 0;
                difference = d.source.y - d.target.y;
                sign = Math.sign(difference);
                if (Math.abs(difference) > 26) {
                    modifier = 28 * -1 * sign;
                }
                return d.source.y + modifier;
            })
            .attr("x2", function (d) {
                modifier = 0;
                difference = d.source.x - d.target.x;
                sign = Math.sign(difference);
                if (Math.abs(difference) > 26) {
                    modifier = 28 * sign;
                }
                return d.target.x + modifier;
            })
            .attr("y2", function (d) {
                modifier = 0;
                difference = d.source.y - d.target.y;
                sign = Math.sign(difference);
                if (Math.abs(difference) > 26) {
                    modifier = 28 * sign;
                }
                return d.target.y + modifier;
            });

        node.attr("x", function (d) { return d.x - 32; })
            .attr("y", function (d) { return d.y - 32; });

        text.attr("x", function (d) { return d.x; })
            .attr("y", function (d) { return d.y + 50; });

        svg.selectAll("tspan")
            .attr("x", function (d) { return d.x; })
            .attr("y", function (d) { return d.y + 50; });
    }

    function dblclick(d) {
        d3.select(this).classed("fixed", d.fixed = false);
    }

    function dragstart(d) {
        d3.select(this).classed("fixed", d.fixed = true);
    }

    function wrap(text, width) {
        text.each(function () {
            //console.log(d3.select(this).text());
            var text = d3.select(this),
                words = text.text().split(/\s+/).reverse(),
                word,
                line = [],
                lineNumber = 0,
                lineHeight = 1.1, // ems
                x = text.attr("x"),
                y = text.attr("y"),
                dy = 0,//parseFloat(text.attr("dy")),
                tspan = text.text(null)
                    .append("tspan")
                    .attr("x", x)
                    .attr("y", y)
                    .attr("dy", dy + "em");
            while (word = words.pop()) {
                line.push(word)
                tspan.text(line.join(" "))
                if (tspan.node().getComputedTextLength() > width) {
                    line.pop()
                    tspan.text(line.join(" "))
                    line = [word]
                    tspan = text.append("tspan")
                        .attr("x", x)
                        .attr("y", y)
                        .attr("dy", ++lineNumber * lineHeight + dy + "em")
                        .text(word);
                }
            }
        })
    }

    function copyMarkdown() {
        var table = document.getElementById('markdown-table');
        var content = table.innerHTML;
        navigator.clipboard.writeText(content);
    }

    function blackWhite() {
        var titles = document.getElementsByClassName("node-title");
        for (i = 0; i < titles.length; i++) {
            if (titles[i].style.fill == "black") { titles[i].style.fill = "white"; }
            else if (titles[i].style.fill == "white") { titles[i].style.fill = "black"; }
            else { titles[i].style.fill = "white"; }
        }

        var linkNumbers = document.getElementsByClassName("link-numbers");
        for (i = 0; i < linkNumbers.length; i++) {
            var color = linkNumbers[i].style.fill;
            if (color == "black") { linkNumbers[i].style.fill = "white"; }
            else if (color == "white") { linkNumbers[i].style.fill = "black"; }
            else { linkNumbers[i].style.fill = "white"; }
        }

        var body = document.body;
        if (body.style.backgroundColor == "white") { body.style.backgroundColor = "black"; }
        else if (body.style.backgroundColor == "black") { body.style.backgroundColor = "white"; }
        else { body.style.backgroundColor = "black"; }

        var rectangles = document.getElementsByClassName("node-rects");
        for (i = 0; i < rectangles.length; i++) {
            var color = rectangles[i].style.fill;
            alert(color);
            if (color == "rgb(210, 210, 210)") { rectangles[i].style.fill = "rgb(74, 74, 74)"; }
            else if (color == "rgb(74, 74, 74)") { rectangles[i].style.fill = "rgb(210, 210, 210)"; }
            else { rectangles[i].style.fill = "rgb(74, 74, 74)"; }
        }

    }
</script>

<pre id="markdown-table" style="display:none;">
@ViewBag.MarkdownTable
</pre>